<code>
#usecomp "test_component.cmc"
#usecomp "InputBox.cmc"

#include "platform.h"

struct test_struct
{
    int test_number;
};

struct MainPage : Page
{    
    int mycolor;
    int count;
    void* my_element;
    input_box_args* inputbox_args;
    
    test_struct* things;
    int things_len;
    
    ArenaString* userInput;
    
    void PageMain(DOM* dom)
    {
        printf("Hello from page main!\n");
        count = 0;
        
        should_show = true;
        my_element = NULL;
        things_len = 5;
        things = (test_struct*)malloc(things_len*sizeof(test_struct));
        memset(things, 0, things_len*sizeof(test_struct));
        
        userInput = CreateString(dom->strings);
        inputbox_args = (input_box_args*)malloc(sizeof(input_box_args));
        inputbox_args->content = userInput;
        inputbox_args->watermark = NULL;
        inputbox_args->cursor_height = 50;
        inputbox_args->cursor_width = 5;
    }
    
    void OnFrame(DOM* dom)
    {
        Element* focused = GetFocused(dom);
        
        Event* curr_event = PopEvent(dom);
        while(curr_event)
        {
            switch(curr_event->type)
            {
                case(EventType::FOCUSED):
                {
                    if(curr_event->Focused.target->master != this)
                    {
                        RouteEvent(curr_event->Focused.target->master, curr_event);
                        break;
                    }
                    
                    if(curr_event->Focused.target->global_id == EID(mine, MainPage))
                    {
                        printf("Got specialized focus!\n");
                    }
                    
                    printf("Got focus!\n");
                    break;
                }
                case(EventType::DE_FOCUSED):
                {
                    if(curr_event->DeFocused.target->master != this)
                    {
                        RouteEvent(curr_event->DeFocused.target->master, curr_event);
                        break;
                    }
                
                    printf("Lost focus!\n");
                    break;
                }
                case(EventType::KEY_DOWN):
                {
                    if(focused && focused->master != this)
                    {
                        RouteEvent(focused->master, curr_event);
                        break;
                    }
                   
                    //Element* focused = GetFocused(dom);
                    if(focused && focused->global_id == EID(mine, MainPage))
                    {
                        handleUserInput(curr_event);
                    }
                    printf("Char: %c Code: %d Event Type: %d\n", (char)curr_event->Key.key_char, curr_event->Key.code, (int)curr_event->type);
                    break;
                }
                case(EventType::TICK):
                {
                    if(curr_event->Tick.target->master != this)
                    {
                        RouteEvent(curr_event->Tick.target->master, curr_event);
                        break;
                    }
                    
                    
                    break;
                }
                default:
                {
                    if(focused && focused->master != this)
                    {
                        RouteEvent(focused->master, curr_event);
                        break;
                    }   
                    break;
                }
            }
            curr_event = PopEvent(dom);
        }
    }

    void handleUserInput(Event* in)
    {
        if(!(char)in->Key.key_char)
        {
            return;
        }
    
        char added_char = (char)in->Key.key_char;
        Append(userInput, &added_char, 1);
    }

    void onSwitchPage()
    {
	   SwitchPage(master_dom, "TestPage");
    }
 
    bool should_show;
 
    void countChanged()
    { 
        should_show = !should_show;
        count++;
        
    	printf("Count is now %d\n", count);
    	if(my_element)
    	{
    	   Element* image_element = (Element*)my_element;
    	   image_element->Image.handle = RenderplatformGetImage("thumbs_up.jpg");
    	}
    	
    	things[1].test_number = count % 2;
    
        PlatformSetTextClipboard("what", 4);
        uint32_t len = 0;
        char* text = PlatformGetTextClipboard(&len);
        printf("Got this from the clipboard: %.*s\n", (int)len, text);
        DeAllocScratch(text);
    }
    
    void onFocusTitle(bool isFocused)
    {
        
        if(isFocused)
        {
            printf("Focused the new thing!\n");
        }
        else
        {
            printf("Defocused the new thing!\n");
        }
    }
};

</code>
<root>
<vdiv class="fill">
	<hdiv class="title" onfocus="{e->onFocusTitle(arg0)}" id="mine">Image Gallery {userInput}</hdiv>
	<hdiv class="img_container" condition="{return e->should_show;}">
		<img this="{my_element}" src="texture.png" focusable></img>
		<img src="texture.png" onclick="{e->onSwitchPage()}"></img>
	</hdiv>
	<InputBox args="{e->inputbox_args}"></InputBox>
	<each loop="{things;return e->things_len;test_struct}">
        <hdiv condition="{{return a[index].test_number == 0;}}">
	       This is a loooooped text! {{test_number}}
    	<InputBox args="{e->inputbox_args}"></InputBox>
        </hdiv> 
	</each>
	<vdiv class="footer" onclick="{e->countChanged()}">
		Count: {count}
	</vdiv>
</vdiv>
</root>

<style>

root {
    color: 120, 0, 0;
}

fill {
    color: 255, 255, 255;
	height: 90%;
	width: 100%;
	vertical_clipping: scroll;
}

footer {
	height: fit;
	width: fit;
	margin: grow, grow, grow;
	color: 120, 120, 120;
	corners: 20px, 20px, 20px, 20px;
}

footer!hover {
	priority: 2;
	margin: grow, grow, grow;
	color: 160, 160, 160;
	corners: 20px, 20px, 20px, 20px;
}

title {
	margin: grow, grow, 0px, 0px;
	font_size: 70px;
	width: fit;
	height: fit;
}

img_container {
	margin: grow, grow, 0px, 0px;
	width: fit;
	height: fit;
}

img {
	width: 200px;
	height: 200px;
	corners: 30px, 30px, 30px, 30px;
}

img!hover {
	priority: 2;
	width: 400px;
	height: 400px;
	corners: 30px, 30px, 30px, 30px;
}
</style>
